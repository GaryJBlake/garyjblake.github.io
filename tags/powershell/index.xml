<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerShell on My Cloudy World</title><link>http://jadenetworksolutions.co.uk/tags/powershell/</link><description>Recent content in PowerShell on My Cloudy World</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2019–2025, Gary Blake; all rights reserved.</copyright><lastBuildDate>Thu, 28 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://jadenetworksolutions.co.uk/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>VCF Installer: Retrieve Component Passwords from VCF Installer</title><link>http://jadenetworksolutions.co.uk/post/vcf-90/vcf-90-installer-retrieve-passwords/</link><pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate><guid>http://jadenetworksolutions.co.uk/post/vcf-90/vcf-90-installer-retrieve-passwords/</guid><description>
When the auto-generate passwords options is selected within the VCF Installer UI, there maybe a scenario where you need to perform troubleshooting and a need to login to one of the underlying component appliances. Of course this is only possible if you know the passwords that were auto-generated, its relatively simple to retrieve the JSON specification used to perform the implementation from the VCF Installer appliance itself.
The following procedure demonstrates how you can retrieve a specific section of the JSON specification.</description></item><item><title>Simplified Consumption of PowerShell Automation with VMware Validated Solutions</title><link>http://jadenetworksolutions.co.uk/post/vvs/vvs-powershell-menu/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><guid>http://jadenetworksolutions.co.uk/post/vvs/vvs-powershell-menu/</guid><description>
Last Updated: 13-Jun-2024
Background When we started on the VMware Validated Solution journey nearly three years ago, one of the main criteria we agreed on was to provide our customers with an automated way to deploy and configure whatever was defined within a solution. During the process we also did some analysis on tooling and came to the decision that we would use PowerShell as our automation tool of choice based on the flexibility it gave us.</description></item></channel></rss>